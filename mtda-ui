#!/usr/bin/env python3
# ---------------------------------------------------------------------------
# Command Line Interface for MTDA
# ---------------------------------------------------------------------------
#
# This software is a part of MTDA.
# Copyright (C) 2021 Siemens Digital Industries Software
#
# ---------------------------------------------------------------------------
# SPDX-License-Identifier: MIT
# ---------------------------------------------------------------------------

import os
import sys
import time

from py3qterm import TerminalWidget
from py3qterm.backend import Session
from py3qterm.backend import Terminal

from PyQt5.QtCore import QUrl

from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import qApp, QMainWindow, QAction, QApplication, QStyle, QTabWidget

from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer, QMediaMetaData
from PyQt5.QtMultimediaWidgets import QVideoWidget

from mtda.client import Client
from mtda.console.screen import ScreenOutput


class DeviceConsole(TerminalWidget):

    def __init__(self, parent):
        super().__init__(parent)

    def agent(self):
        if Session._mux is not None:
            return Session._mux.agent(self._session._session_id)
        return None

    def execute(self, command="/bin/bash"):
        self._session = DeviceSession()
        self._session.start(command)
        self._timer_id = None
        self.focusInEvent(None)

    def screen(self):
        if Session._mux is not None:
            return Session._mux.screen(self._session._session_id)
        return None


class DeviceMux:

    def __init__(self):
        self.session = {}

    def agent(self, sid):
        if sid in self.session:
            return self.session[sid]['agent']
        return None

    def proc_keepalive(self, sid, w, h, cmd=None):
        if sid not in self.session:
            # Start a new session
            self.remote = os.getenv("MTDA_REMOTE", "localhost")
            agent = Client(self.remote)
            term = Terminal(w, h)
            self.session[sid] = {
                'agent': agent,
                'state': 'unborn',
                'term': term,
                'time': time.time(),
                'w': w,
                'h': h
            }
            screen = DeviceScreen(agent, term, self.session[sid])
            agent.console_remote(self.remote, screen)
            agent.monitor_remote(self.remote, screen)
            agent.start()
            self.session[sid]['state'] = 'alive'
            self.session[sid]['screen'] = screen
        os.environ["COLUMNS"] = str(w)
        os.environ["ROWS"] = str(h)
        return True

    def proc_dump(self, sid):
        if sid not in self.session:
            return False
        return self.session[sid]['term'].dump()

    def proc_write(self, sid, d):
        if sid not in self.session:
            return False
        elif self.session[sid]['state'] != 'alive':
            return False
        term = self.session[sid]['term']
        d = term.pipe(d)
        agent = self.session[sid]['agent']
        agent.console_send(d)
        return True

    def screen(self, sid):
        if sid in self.session:
            return self.session[sid]['screen']
        return None

    def stop(self):
        return None


class DeviceScreen(ScreenOutput):

    def __init__(self, mtda, term, session):
        super().__init__(mtda)
        self._event_handler = None
        self._term = term
        self._session = session

    def add_listener(self, handler):
        self._event_handler = handler

    def on_event(self, event):
        if self._event_handler is not None:
            event = event.split()
            self._event_handler(event[0], event[1:])

    def write(self, data):
        self._term.write(data)
        data = self._term.read()
        self._session["changed"] = time.time()


class DeviceSession(Session):

    def __init__(self):
        super().__init__()
        Session._mux = DeviceMux()


class MultiTenantDeviceAccessWindow(QMainWindow):

    def __init__(self):
        super().__init__()

        self.initUI()

    def capture(self):
        screen = self.console.screen()
        if screen is not None:
            if screen.capture_enabled() is True:
                screen.capture_stop()
                icn = self.style().standardIcon(QStyle.SP_DialogSaveButton)
                self.captureAct.setIcon(icn)
            else:
                screen.capture_start()
                icn = self.style().standardIcon(QStyle.SP_BrowserStop)
                self.captureAct.setIcon(icn)

    def device_event(self, event, data):
        if event == "POWER":
            self.power_event(data[0])
        elif event == "STORAGE":
            self.storage_event(data[0])

    def initUI(self):

        self.tabs = QTabWidget(self)
        self.tabs.setTabBarAutoHide(True)
        self.setCentralWidget(self.tabs)

        self.console = DeviceConsole(self.tabs)
        agent = self.console.agent()
        screen = self.console.screen()
        screen.add_listener(self.device_event)
        self.tabs.addTab(self.console, 'Console')

        self.media = QMediaPlayer(None, QMediaPlayer.StreamPlayback)
        self.video = QVideoWidget(self.tabs)
        self.media.setVideoOutput(self.video)

        self.video_url = agent.video_url()
        if self.video_url is not None:
            self.media.setMedia(QMediaContent(QUrl(self.video_url)))
            self.tabs.addTab(self.video, 'Video')

        exitIcn = self.style().standardIcon(QStyle.SP_FileDialogEnd)
        exitAct = QAction(exitIcn, 'Exit', self)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit MTDA')
        exitAct.triggered.connect(self.close)

        powerAct = QAction('Power on/off', self)
        powerAct.setShortcut('Ctrl+P')
        powerAct.triggered.connect(self.power)
        self.powerAct = powerAct
        self.power_event(agent.target_status())

        storageAct = QAction('Swap storage', self)
        storageAct.setShortcut('Ctrl+S')
        storageAct.triggered.connect(self.storage)
        self.storageAct = storageAct
        status, writing, written = agent.storage_status()
        self.storage_event(status)

        captureIcn = self.style().standardIcon(QStyle.SP_DialogSaveButton)
        captureAct = QAction(captureIcn, 'Capture screen start/stop', self)
        captureAct.setStatusTip('Capture screen output start/stop')
        captureAct.triggered.connect(self.capture)
        self.captureAct = captureAct

        self.statusBar()

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(exitAct)

        toolbar = self.addToolBar('Exit')
        toolbar.addAction(powerAct)
        toolbar.addAction(storageAct)
        toolbar.addAction(captureAct)

        self.resize(880, 760)
        self.setWindowTitle('MTDA')
        self.show()

    def power(self):
        agent = self.console.agent()
        if agent is not None:
            agent.target_toggle()

    def power_event(self, event):
        a = self.powerAct
        if event == "OFF":
            icn = self.style().standardIcon(QStyle.SP_ComputerIcon)
            txt = "Power on device"
            self.media.stop()
        else:
            icn = self.style().standardIcon(QStyle.SP_MediaStop)
            txt = "Power off device"
            if self.video_url != '':
                self.media.play()

        a.setStatusTip(txt)
        a.setText(txt)
        a.setIcon(icn)

    def storage(self):
        agent = self.console.agent()
        if agent is not None:
            agent.storage_swap()

    def storage_event(self, event):
        a = self.storageAct
        if event == "HOST":
            icn = self.style().standardIcon(QStyle.SP_DriveHDIcon)
            txt = "Connect storage to target"
        elif event == "TARGET":
            icn = self.style().standardIcon(QStyle.SP_DirClosedIcon)
            txt = "Connect storage to host"
        else:
            return None
        a.setStatusTip(txt)
        a.setText(txt)
        a.setIcon(icn)

def main():
    app = QApplication(sys.argv)
    ex = MultiTenantDeviceAccessWindow()
    os._exit(app.exec_())


if __name__ == '__main__':
    main()
